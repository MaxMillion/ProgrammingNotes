JSP Notes

Are turned into servlets by container (JBoss)
Server side technology that accomplishes the same thing as PHP, ASP, or ColdFusion
Once you have deployed a JSP, it only has to be translated and compiled once. After that it is like any other servlet.
Expression Language (EL) is the new best practice. Unfortunately older applications must still be maintained.
	syntax: ${application.mail}
		same as <%= application.getAttribute("mail") %>

Scriplet
	<% Java Code %>
	
Expression
	<%= Argument sent to println() %>
	Used to insert values directly into the output
	Don't use semi-colons in expressions
	Predefined variables
		request 
			HttpServletRequest
			gives access to the request parameters, the request type (GET/POST), and the incoming HTTP headers (cookies)
		response
			HttpServletResponse
			can set HTTP status codes and response headers
		session 
			HttpSession associated with the request
			this variable is bound even if there is no incoming session reference (unless turned off via the session attribute of the page directive)
		out
			the PrintWriter (a buffered version called JspWriter) used to send output to the client
			used most often in scriplets, as expressions print to the screen by nature
		page
			synonym for "this" in Java
		pageContext
			variable that stores the value of the Page-Context object associated with the current page
			single point of access to many of the page attributes and provides a convenient place to store shared data
		application
			ServletContext
			can store persistent data shared by all servlets
		config
			variable storing the ServletConfig object for the page		
			
Directive
	<%@ page import="java.util.*" %>
		page can be placed anywhere in document
		import is just an attribute
		defines page specific properties
		isErrorPage="true" to set page to be the error page
		errorPage set to "yourErrorPage.jsp" to tell page where to forward if it encounters errors. Can also use the <error-page> DD tag to declare error pages for the entire web app
	<%@ taglib tagdir="blah" %>
		custom tags
	<%@ include file="blah.html" %>
		include should be placed at the point you want the file inserted
		defines text and code that gets added into the current page at translation time
		lets you build reusable chunks that can be added to each page without having to duplicate all the code in each JSP (like a navigation bar)

page Attributes
	import
		importing java packages
		separate by commas if importing multiple packages with the same directive
		only page attribute that can be used more than once in the same document
		use near the top
	contentType
		sets the Content-Type response header
	isThreadSafe
		boolean that controls wheather or not the resulting servlet implements the SingleThreadModel
		true by default
		false means it implements the SingleThreadModel
	session
		boolean that controls whether or not the page participates in HTTP sessions
		true by default
		remember: sessions are user-specific, not page-specific
	buffer
		specifies the size of the buffer used by the out variable
	autoflush
	extends
		designates the superclass of the servlet that will be generated
	info
	errorPage
		specifies a JSP page that should process any exceptions
	isErrorPage
		indicates whether the current page can act as an error page
	language
		specifies the programming language being used (useless right now)
			
Declaration
	<%! Code added to the servlet class outside of the service method (member variables/methods) %>
	don't use declarations to override the standard servlet lifecycle methods (service, doGet, init, etc.)
	for initialization/cleanup override jspInit/jspDestroy
Comment
	<%-- Comment goes here --%>
	Unlike HTML comments, these will be stripped out of the translated page. Both can be used in JSPs.
	

JSP Tags
	JSTL - Java Standard Tag Library
	can be used instead of having scriplets all over the place
	For loop to make a table of movies
		<table>
			<c:forEach var="movie" items="${movieList}" >
				<tr>
					<td>${movie}</td>
				</tr>
			</c:forEach>
		</table>
	<jsp:include page="inputComments.jsp" />
		can conditionally include certain things on the page
		one example would be only allowing members to post comments 
		<jsp:param name="subTitle" value="Blah blah blah" />
			can use this to customize the included content
	<c:choose>, <c:when>, <c:otherwise
		like an if else
	<c:import url="http://blhablah.html" />
		Adds content from the url to the current page at request time
		
Custom Tags
	TLD (Tag Library Descriptor)
		has xml/html like syntax
		<uri>unique name</uri>
		<tag>
			<description>good idea to include</description>
			<name>tagNameGoesHere</name>
			<tag-class>called when someone uses the tag in a JSP</tag-class>
			<attribute>
				<name>user</name>
				<required>true</required>
				<rtexprvalue>true</rtexprvalue> //"user" attribute can be a run time expression value, not just a String literal
			</attribute>
		</tag>
	<%@ taglib prefix="dt" uri="unique name" %>
	<dt:tagNameGoesHere user="${userName}"/>
	dt is the prefix we use
	name comes from the TLD
	URI is a unique identifier in the TLD for a tag library
		what you put in your taglib directive
		tells the container how to identify the TLD file within the web app
		container then maps the tag name used in the JSP to the Java code that runs when you use the tag
		uri in TLD and in the taglib directive must match, but does not have to be the location of the actual tag handler
		
		
WAR file - Web Archive
	a .jar file with a .war extension
	snap shot of your web app architecture in a portable, compressed form
	
	
JavaBeans
	POJOs that are serializable, have a no argument constructor, and allow access to properties using getter and setter methods
			
		
	
	
			